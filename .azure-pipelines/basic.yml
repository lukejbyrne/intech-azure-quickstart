trigger:
  branches:
    include:
      - main  # Trigger pipeline on changes to the main branch

pool:
  vmImage: 'ubuntu-latest'  # Use the latest Ubuntu image for the build agent

variables:
  TF_VERSION: '1.5.0'  # Define Terraform version
  TF_WORKING_DIR: './terraform'  # Path to your Terraform files
  AZURE_SUBSCRIPTION: 'intech'  # Service connection in Azure DevOps

stages:
  - stage: Validate
    displayName: 'Terraform Validation'
    jobs:
      - job: Terraform_Validate
        displayName: 'Terraform Validate'
        steps:
          # Step 1: Install Terraform
          - task: HashiCorpTerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(TF_VERSION)

          # Step 2: Validate Terraform configuration
          - task: Terraform@0
            displayName: 'Terraform Validate'
            inputs:
              command: 'validate'
              workingDirectory: $(TF_WORKING_DIR)

          # Step 3: Run TFLint for linting Terraform code
          - task: TFLint@1
            displayName: 'Run TFLint'
            inputs:
              workingDirectory: $(TF_WORKING_DIR)

  - stage: Deploy
    displayName: 'Deploy to Development Environment'
    dependsOn: Validate  # Ensure validation succeeds before deploying
    condition: succeeded()  # Only proceed if the validation stage succeeded
    jobs:
      - job: Terraform_Deploy
        displayName: 'Terraform Init and Apply - Dev'
        steps:
          # Step 1: Install Terraform
          - task: HashiCorpTerraformInstaller@0
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: $(TF_VERSION)

          # Step 2: Initialize Terraform configuration
          - task: Terraform@0
            displayName: 'Terraform Init (Dev)'
            inputs:
              command: 'init'
              workingDirectory: $(TF_WORKING_DIR)
              backendServiceArm: $(AZURE_SUBSCRIPTION)

          # Step 3: Create an execution plan
          - task: Terraform@0
            displayName: 'Terraform Plan (Dev)'
            inputs:
              command: 'plan'
              workingDirectory: $(TF_WORKING_DIR)
              backendServiceArm: $(AZURE_SUBSCRIPTION)
              environmentServiceName: 'dev'  # Specify environment for planning

          # Step 4: Apply the configuration to the environment
          - task: Terraform@0
            displayName: 'Terraform Apply (Dev)'
            inputs:
              command: 'apply'
              workingDirectory: $(TF_WORKING_DIR)
              backendServiceArm: $(AZURE_SUBSCRIPTION)
              environmentServiceName: 'dev'  # Specify environment for applying
              commandOptions: '-auto-approve'  # Automatically approve the apply
