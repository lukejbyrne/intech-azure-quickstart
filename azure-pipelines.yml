trigger:
  branches:
    include:
      - main  # Trigger pipeline on commits to the main branch

pool:
  name: 'Default'

variables:
  terraformVersion: '1.5.5'  # Specify the Terraform version
  azureServiceConnection: 'intech'  # Azure service connection name
  backendResourceGroup: 'skink-rg'
  backendStorageAccount: 'skinktfstate'  # Remote backend storage account
  backendContainer: 'tfstate'  # Remote backend storage container
  backendKey: 'terraform.tfstate'  # State file name in remote backend

stages:
  # Stage 1: Initialization (init, validate, lint)
  - stage: Initialization
    jobs:
      - job: TerraformInit
        steps:
          - task: TerraformInstaller@0  # Install Terraform
            inputs:
              terraformVersion: $(terraformVersion)

          - checkout: self  # Check out the repository

          # Initialize Terraform
          - task: TerraformTaskV2@2
            inputs:
              provider: 'azurerm'
              command: 'init'  # Initialize Terraform
              backendServiceArm: $(azureServiceConnection)
              backendAzureRmResourceGroupName: $(backendResourceGroup)
              backendAzureRmStorageAccountName: $(backendStorageAccount)
              backendAzureRmContainerName: $(backendContainer)
              backendAzureRmKey: $(backendKey)
              workingDirectory: 'terraform'  # Set the working directory

          # Validate Terraform configuration
          - task: TerraformTaskV2@2
            inputs:
              provider: 'azurerm'
              command: 'validate'  # Validate Terraform configuration
              workingDirectory: 'terraform'

          # Lint Terraform files (e.g., using TFLint or similar)
          - script: |
              echo "Running Terraform linting..."
              tflint
            displayName: 'Run Terraform linting'
            workingDirectory: 'terraform'

  # Stage 2: Plan
  - stage: Plan
    dependsOn: Initialization  # The Plan stage depends on the Initialization stage
    jobs:
      - job: TerraformPlan
        steps:
          - task: TerraformTaskV2@2
            inputs:
              provider: 'azurerm'
              command: 'plan'  # Run terraform plan
              environmentServiceNameAzureRM: $(azureServiceConnection)
              workingDirectory: 'terraform'  # Set the working directory

  # Stage 3: Apply (with manual approval)
  - stage: Apply
    dependsOn: Plan  # The Apply stage depends on the Plan stage
    jobs:
      - job: waitForValidation
        displayName: Wait for external validation  
        pool: server    
        timeoutInMinutes: 4320 # job times out in 3 days
        steps:   
        - task: ManualValidation@0
          timeoutInMinutes: 1440 # task times out in 1 day
          inputs:
              notifyUsers: |
                  lukebyrnee97@gmail.comm
              instructions: 'Please validate the build configuration and resume'
              onTimeout: 'resume'
      - job: TerraformApply
        steps:
          - task: TerraformTaskV2@2
            inputs:
              provider: 'azurerm'
              command: 'apply'  # Run terraform apply
              environmentServiceNameAzureRM: $(azureServiceConnection)
              commandOptions: '--auto-approve'
              workingDirectory: 'terraform'  # Set the working directory
