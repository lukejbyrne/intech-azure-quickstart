# Terraform Pipeline
trigger:
  branches:
    include:
      - main  # Trigger pipeline on changes to the main branch

pool:
  vmImage: 'ubuntu-latest'  # Use an Ubuntu agent for the job

variables:
  terraformVersion: '1.5.5'  # Specify the Terraform version
  azureServiceConnection: 'intech'  # Azure service connection name
  backendStorageAccount: 'skinktfstate'  # Remote backend storage account
  backendContainer: 'tfstate'  # Remote backend storage container
  backendKey: 'terraform.tfstate'  # State file name in remote backend
  
jobs:
  - job: Job1
    steps:
      - task: TerraformInstaller@0
        inputs:
          terraformVersion: $(terraformVersion)

      - checkout: self

      - task: TerraformTaskV2@2
        inputs:
          provider: 'azurerm'
          command: 'init'
          backendServiceArm: $(azureServiceConnection)
          backendAzureRmStorageAccountName: $(backendStorageAccount)
          backendAzureRmContainerName: $(backendContainer)
          backendAzureRmKey: $(backendKey)
          workingDirectory: 'terraform'

  - job: Job2
    dependsOn: Job1
    steps:
      - task: TerraformTaskV2@2
        inputs:
          provider: 'azurerm'
          command: 'plan'
          environmentServiceNameAzureRM: $(azureServiceConnection)
          commandOptions: '-out=plan.tfplan'
          workingDirectory: 'terraform'

  - job: Job3
    dependsOn: Job2
    steps:
      - task: TerraformTaskV2@2
        inputs:
          provider: 'azurerm'
          command: 'apply'
          environmentServiceNameAzureRM: $(azureServiceConnection)
          commandOptions: 'plan.tfplan'
          workingDirectory: 'terraform'

  - job: PublishArtifacts
    dependsOn: Job3
    steps:
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: './terraform/terraform.tfstate'
          artifactName: 'terraform'
          publishLocation: 'Container'
